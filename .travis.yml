language: cpp

compiler:
 - gcc
 - clang

os:
 - linux
 - osx
 - windows
 
dist: bionic
osx_image: xcode11.2

matrix:
  exclude:
    - os: windows
      compiler: gcc

before_script:
  - if [ "$TRAVIS_OS_NAME" = "osx" ]; then brew update          ; fi
  - if [ "$TRAVIS_OS_NAME" = "osx" ]; then brew install cmake lcov doxygen ; fi
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then sudo apt-get update          ; fi
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then sudo apt-get install cmake lcov doxygen; fi

script:
  # create a build folder for the out-of-source build
  - mkdir build
  # switch to build directory
  - cd build
  # run cmake; here we assume that the project's
  # top-level CMakeLists.txt is located at '..'
  - if [ "$TRAVIS_OS_NAME" = "osx" ]; then cmake .. ;  fi
  - if [ "$TRAVIS_OS_NAME" = "linux" ] && [ "$TRAVIS_COMPILER" = "clang" ]; then cmake .. ;fi
  - if [ "$TRAVIS_OS_NAME" = "linux" ] && [ "$TRAVIS_COMPILER" = "gcc" ]; then cmake -DCMAKE_BUILD_TYPE=Coverage .. ;fi
  - if [ "$TRAVIS_OS_NAME" = "windows" ]; then cmake .. ; fi
  - if [ "$TRAVIS_OS_NAME" = "osx" ]; then cmake --build . ; fi
  - if [ "$TRAVIS_OS_NAME" = "linux" ] && [ "$TRAVIS_COMPILER" = "clang" ]; then cmake --build . ; fi
  - if [ "$TRAVIS_OS_NAME" = "linux" ] && [ "$TRAVIS_COMPILER" = "gcc" ]; then cmake --build . --target coverage ; fi
  - if [ "$TRAVIS_OS_NAME" = "windows" ]; then cmake --build . ; fi
  - cmake --install .
  # if the project uses ctest we can run the tests like this
  # - make test
  # - make docs 

after_success:
# Create lcov report
# capture coverage info
# - lcov --directory . --capture --output-file coverage.info
# filter out system and extra files.
# To also not include test code in coverage add them with full path to the patterns: '*/tests/*'
# - lcov --remove coverage.info '/usr/*' "${HOME}"'/.cache/*' --output-file coverage.info
# output coverage data for debugging (optional)
# - lcov --list coverage.info
# Uploading to CodeCov
# '-f' specifies file(s) to use and disables manual coverage gathering and file search which has already been done above
# - bash <(curl -s https://codecov.io/bash) -f coverage.info || echo "Codecov did not collect coverage reports"
