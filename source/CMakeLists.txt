find_package(Git REQUIRED)

set(YAODAQ_INCLUDE "${CMAKE_CURRENT_SOURCE_DIR}/include")
set(YAODAQ_SRC "${CMAKE_CURRENT_SOURCE_DIR}/src")

find_package(Threads)
set(THREADS_PREFER_PTHREAD_FLAG TRUE)

if(BUILD_ANALYSIS OR BUILD_DAQ)
  ROOT_GENERATE_DICTIONARY(G__Channel "${YAODAQ_INCLUDE}/Channel.hpp" LINKDEF "${YAODAQ_INCLUDE}/ChannelLinkDef.hpp")
  add_library(Channel OBJECT "${YAODAQ_SRC}/Channel.cpp" G__Channel.cxx)
  target_include_directories(Channel PRIVATE "${YAODAQ_INCLUDE}")
  add_library(Channel_shared SHARED $<TARGET_OBJECTS:Channel>)
  target_include_directories(Channel_shared PUBLIC $<BUILD_INTERFACE:${YAODAQ_INCLUDE}> PUBLIC $<INSTALL_INTERFACE:${INCLUDE_OUTPUT_DIRECTORY}>)
  target_link_libraries(Channel_shared INTERFACE ${ROOT_LIBRARIES} INTERFACE Threads::Threads)
  add_library(Channel_static STATIC $<TARGET_OBJECTS:Channel>)
  target_link_libraries(Channel_static INTERFACE ${ROOT_LIBRARIES} INTERFACE Threads::Threads)
  target_include_directories(Channel_static PUBLIC $<BUILD_INTERFACE:${YAODAQ_INCLUDE}> PUBLIC $<INSTALL_INTERFACE:${INCLUDE_OUTPUT_DIRECTORY}>)
  add_custom_target(CopyChannel DEPENDS ALL COMMAND ${CMAKE_COMMAND} -E copy libChannel_rdict.pcm "${RUNTIME_OUTPUT_DIRECTORY}/libChannel_rdict.pcm")
  set_target_properties(Channel PROPERTIES PUBLIC_HEADER "${YAODAQ_INCLUDE}/Channel.hpp")
  install(TARGETS Channel RUNTIME DESTINATION bin LIBRARY DESTINATION lib ARCHIVE DESTINATION lib PUBLIC_HEADER DESTINATION include)


  ROOT_GENERATE_DICTIONARY(G__Event "${YAODAQ_INCLUDE}/Event.hpp" LINKDEF "${YAODAQ_INCLUDE}/EventLinkDef.hpp")
  add_library(Event OBJECT "${YAODAQ_SRC}/Event.cpp" G__Event.cxx)
  target_include_directories(Event PRIVATE "${YAODAQ_INCLUDE}")
  target_link_libraries(Event INTERFACE ${ROOT_LIBRARIES})
  add_library(Event_shared SHARED $<TARGET_OBJECTS:Event>)
  target_include_directories(Event_shared PUBLIC $<BUILD_INTERFACE:${YAODAQ_INCLUDE}> PUBLIC $<INSTALL_INTERFACE:${INCLUDE_OUTPUT_DIRECTORY}>)
  target_link_libraries(Event_shared INTERFACE ${ROOT_LIBRARIES} INTERFACE Threads::Threads)
  add_library(Event_static STATIC $<TARGET_OBJECTS:Event>)
  target_include_directories(Event_static PUBLIC $<BUILD_INTERFACE:${YAODAQ_INCLUDE}> PUBLIC $<INSTALL_INTERFACE:${INCLUDE_OUTPUT_DIRECTORY}>)
  target_link_libraries(Event_static INTERFACE ${ROOT_LIBRARIES} INTERFACE Threads::Threads)
  add_custom_target(CopyEvent DEPENDS ALL COMMAND ${CMAKE_COMMAND} -E copy libEvent_rdict.pcm "${RUNTIME_OUTPUT_DIRECTORY}/libEvent_rdict.pcm")
  set_target_properties(Event PROPERTIES PUBLIC_HEADER "${YAODAQ_INCLUDE}/Event.hpp")
  install(TARGETS Event RUNTIME DESTINATION bin LIBRARY DESTINATION lib ARCHIVE DESTINATION lib PUBLIC_HEADER DESTINATION include)
endif()

if(BUILD_DAQ)

  configure_file("${YAODAQ_SRC}/ProgramInfos.hpp.in" "${INCLUDE_OUTPUT_DIRECTORY}/ProgramInfos.hpp" @ONLY)

  include(IXWebSocket)
  add_library(WebSocket INTERFACE)
  add_dependencies(WebSocket IXWebSocket)
  if(NOT WIN32)
    find_package(ZLIB)
    target_link_libraries(WebSocket INTERFACE ZLIB::ZLIB INTERFACE mbedcrypto INTERFACE ixwebsocket INTERFACE mbedtls INTERFACE mbedx509)
    target_include_directories(WebSocket INTERFACE "${INCLUDE_OUTPUT_DIRECTORY}/ixwebsocket")
  else()
    target_link_libraries(WebSocket INTERFACE mbedcrypto INTERFACE ixwebsocket INTERFACE mbedtls INTERFACE mbedx509) 
    target_include_directories(WebSocket INTERFACE "${INCLUDE_OUTPUT_DIRECTORY}/ixwebsocket")
  endif()

  include(CLI11)
  include(spdlog)
  add_library(Util INTERFACE)
  add_dependencies(Util CLI11 spdlog)
  target_link_libraries(Util INTERFACE spdlog)
  target_include_directories(Util INTERFACE "${INCLUDE_OUTPUT_DIRECTORY}" INTERFACE "${INCLUDE_OUTPUT_DIRECTORY}/spdlog")

  include(elogpp)
  include(soci)
  include(toml11)

  add_library(Modules INTERFACE)

  if(CAEN_HARDWARE)
    add_subdirectory(CAEN)
    add_dependencies(Modules CAENlibs)
    target_link_libraries(Modules INTERFACE CAENConnectors)
    target_include_directories(Modules INTERFACE $<BUILD_INTERFACE:${CMAKE_SOURCE_DIR}/source/CAEN/include> INTERFACE $<INSTALL_INTERFACE:${INCLUDE_OUTPUT_DIRECTORY}/CAEN>)
    target_compile_definitions(Modules INTERFACE CAENLIBS)
  endif()
    
  add_library(Error "${YAODAQ_SRC}/Error.cpp")
  target_include_directories(Error PUBLIC $<BUILD_INTERFACE:${YAODAQ_INCLUDE}> PUBLIC $<INSTALL_INTERFACE:${INCLUDE_OUTPUT_DIRECTORY}> )
  set_target_properties(Error PROPERTIES PUBLIC_HEADER "${YAODAQ_INCLUDE}/Error.hpp")
  install(TARGETS Error RUNTIME DESTINATION bin LIBRARY DESTINATION lib ARCHIVE DESTINATION lib PUBLIC_HEADER DESTINATION include)

  add_library(ConnectorInfos "${YAODAQ_SRC}/ConnectorInfos.cpp")
  add_dependencies(ConnectorInfos toml11)
  target_include_directories(ConnectorInfos PUBLIC $<BUILD_INTERFACE:${YAODAQ_INCLUDE}> PUBLIC $<INSTALL_INTERFACE:${INCLUDE_OUTPUT_DIRECTORY}> PUBLIC "${INCLUDE_OUTPUT_DIRECTORY}/toml")
  set_target_properties(ConnectorInfos PROPERTIES PUBLIC_HEADER "${YAODAQ_INCLUDE}/ConnectorInfos.hpp")
  install(TARGETS ConnectorInfos RUNTIME DESTINATION bin LIBRARY DESTINATION lib ARCHIVE DESTINATION lib PUBLIC_HEADER DESTINATION include)
    
  add_library(Connector "${YAODAQ_SRC}/Connector.cpp")
  add_dependencies(Connector ConnectorInfos)
  target_include_directories(Connector PUBLIC $<BUILD_INTERFACE:${YAODAQ_INCLUDE}> PUBLIC $<INSTALL_INTERFACE:${INCLUDE_OUTPUT_DIRECTORY}>)
  target_link_libraries(Connector PUBLIC ConnectorInfos)
  set_target_properties(Connector PROPERTIES PUBLIC_HEADER "${YAODAQ_INCLUDE}/Connector.hpp")
  install(TARGETS Connector RUNTIME DESTINATION bin LIBRARY DESTINATION lib ARCHIVE DESTINATION lib PUBLIC_HEADER DESTINATION include)
  
  add_library(ConnectorFactory "${YAODAQ_SRC}/ConnectorFactory.cpp")
  add_dependencies(ConnectorFactory ConnectorInfos Modules)
  target_include_directories(ConnectorFactory PUBLIC $<BUILD_INTERFACE:${YAODAQ_INCLUDE}> PUBLIC $<INSTALL_INTERFACE:${INCLUDE_OUTPUT_DIRECTORY}>)
  target_link_libraries(ConnectorFactory PUBLIC ConnectorInfos PUBLIC Modules)
  set_target_properties(ConnectorFactory PROPERTIES PUBLIC_HEADER "${YAODAQ_INCLUDE}/ConnectorFactory.hpp")
  install(TARGETS ConnectorFactory RUNTIME DESTINATION bin LIBRARY DESTINATION lib ARCHIVE DESTINATION lib PUBLIC_HEADER DESTINATION include)
    
  add_library(BoardInfos "${YAODAQ_SRC}/BoardInfos.cpp")
  target_include_directories(BoardInfos PUBLIC $<BUILD_INTERFACE:${YAODAQ_INCLUDE}> PUBLIC $<INSTALL_INTERFACE:${INCLUDE_OUTPUT_DIRECTORY}>  PUBLIC "${INCLUDE_OUTPUT_DIRECTORY}/toml")
  add_dependencies(BoardInfos toml11)
  set_target_properties(BoardInfos PROPERTIES PUBLIC_HEADER "${YAODAQ_INCLUDE}/BoardInfos.hpp")
  install(TARGETS BoardInfos RUNTIME DESTINATION bin LIBRARY DESTINATION lib ARCHIVE DESTINATION lib PUBLIC_HEADER DESTINATION include)
    
  add_library(Configuration "${YAODAQ_SRC}/Configuration.cpp")
  add_dependencies(Configuration ConnectorInfos BoardInfos)
  target_include_directories(Configuration PUBLIC $<BUILD_INTERFACE:${YAODAQ_INCLUDE}> PUBLIC $<INSTALL_INTERFACE:${INCLUDE_OUTPUT_DIRECTORY}>)
  target_link_libraries(Configuration PUBLIC ConnectorInfos PUBLIC BoardInfos)
  set_target_properties(Configuration PROPERTIES PUBLIC_HEADER "${YAODAQ_INCLUDE}/Configuration.hpp")
  install(TARGETS Configuration RUNTIME DESTINATION bin LIBRARY DESTINATION lib ARCHIVE DESTINATION lib PUBLIC_HEADER DESTINATION include)
      
  add_library(Message "${YAODAQ_SRC}/Message.cpp" "${YAODAQ_SRC}/Info.cpp" "${YAODAQ_SRC}/Status.cpp" "${YAODAQ_SRC}/Log.cpp")
  add_dependencies(Message elogpp)
  target_include_directories(Message PUBLIC "${INCLUDE_OUTPUT_DIRECTORY}/json" PUBLIC $<BUILD_INTERFACE:${YAODAQ_INCLUDE}> PUBLIC $<INSTALL_INTERFACE:${INCLUDE_OUTPUT_DIRECTORY}>)
  set_target_properties(Message PROPERTIES PUBLIC_HEADER "${YAODAQ_INCLUDE}/Message.hpp" PUBLIC_HEADER "${YAODAQ_INCLUDE}/Info.hpp" PUBLIC_HEADER "${YAODAQ_INCLUDE}/Status.hpp" PUBLIC_HEADER "${YAODAQ_INCLUDE}/Log.hpp")
  target_link_libraries(Message PUBLIC jsoncpp)
  install(TARGETS Message RUNTIME DESTINATION bin LIBRARY DESTINATION lib ARCHIVE DESTINATION lib PUBLIC_HEADER DESTINATION include)
    
  add_library(WebSocketClient "${YAODAQ_SRC}/WebsocketClient.cpp")
  add_dependencies(WebSocketClient WebSocket Util)
  target_link_libraries(WebSocketClient PUBLIC WebSocket PUBLIC Util)
  target_include_directories(WebSocketClient PUBLIC $<BUILD_INTERFACE:${YAODAQ_INCLUDE}> PUBLIC $<INSTALL_INTERFACE:${INCLUDE_OUTPUT_DIRECTORY}>)
  set_target_properties(WebSocketClient PROPERTIES PUBLIC_HEADER "${YAODAQ_INCLUDE}/WebsocketClient.hpp")
  install(TARGETS WebSocketClient RUNTIME DESTINATION bin LIBRARY DESTINATION lib ARCHIVE DESTINATION lib PUBLIC_HEADER DESTINATION include)

  add_library(ConnectionState "${YAODAQ_SRC}/ConnectionState.cpp")
  set_target_properties(ConnectionState PROPERTIES PUBLIC_HEADER "${YAODAQ_INCLUDE}/ConnectionState.hpp")
  target_include_directories(ConnectionState PUBLIC $<BUILD_INTERFACE:${YAODAQ_INCLUDE}> PUBLIC $<INSTALL_INTERFACE:${INCLUDE_OUTPUT_DIRECTORY}>)
  install(TARGETS ConnectionState RUNTIME DESTINATION bin LIBRARY DESTINATION lib ARCHIVE DESTINATION lib PUBLIC_HEADER DESTINATION include)
  add_dependencies(ConnectionState WebSocket)
  target_link_libraries(ConnectionState PUBLIC WebSocket)
  
  add_library(Board "${YAODAQ_SRC}/Module.cpp" "${YAODAQ_SRC}/Board.cpp")
  add_dependencies(Board Message Configuration ConnectorFactory WebSocketClient ConnectionState)
  target_link_libraries(Board PUBLIC Message  PUBLIC WebSocketClient PUBLIC Configuration PUBLIC ConnectorFactory PUBLIC ConnectionState)
  set_target_properties(Board PROPERTIES PUBLIC_HEADER "${YAODAQ_INCLUDE}/Module.hpp" PUBLIC_HEADER "${YAODAQ_INCLUDE}/Board.hpp")
  install(TARGETS Board RUNTIME DESTINATION bin LIBRARY DESTINATION lib ARCHIVE DESTINATION lib PUBLIC_HEADER DESTINATION include)
  
  if(BUILD_WEBSOCKETSERVER)
    add_library(WebsocketServer "${YAODAQ_SRC}/WebsocketServer.cpp")
    add_dependencies(WebsocketServer Board)
    target_include_directories(WebsocketServer PRIVATE $<BUILD_INTERFACE:${YAODAQ_INCLUDE}>)
    set_target_properties(WebSocketClient PROPERTIES PUBLIC_HEADER "${YAODAQ_INCLUDE}/WebsocketServer.hpp")
    target_link_libraries(WebsocketServer PUBLIC Board)
  
    if(BUILD_CONFIGURATOR)
      add_library(Configurator_ "${YAODAQ_SRC}/Configurator.cpp")
      add_dependencies(Configurator_ soci WebsocketServer)
      target_include_directories(Configurator_ PRIVATE $<BUILD_INTERFACE:${YAODAQ_INCLUDE}> PUBLIC ${DATABASES_INCLUDE_DIR})
      set_target_properties(Configurator_ PROPERTIES PUBLIC_HEADER "${YAODAQ_INCLUDE}/Configurator.hpp")
      target_link_libraries(Configurator_ PUBLIC WebsocketServer PUBLIC ${DATABASES_LIBRARIES} PUBLIC soci_core PUBLIC soci_empty)
      if(${DB2_FOUND})
        message(STATUS "Linking soci_db2")
        target_link_libraries(Configurator_ PUBLIC soci_db2)
      endif()
      if(${FIREBIRD_FOUND})
        message(STATUS "Linking soci_firebird")
        target_link_libraries(Configurator_ PUBLIC soci_firebird)
      endif()
      if(${MYSQL_FOUND})
        message(STATUS "Linking soci_mysql")
        target_link_libraries(Configurator_ PUBLIC soci_mysql)
      endif()
      if(${ODBC_FOUND})
        message(STATUS "Linking soci_odbc")
        target_link_libraries(Configurator_ PUBLIC soci_odbc)
      endif()
      if(${ORACLE_FOUND})
        message(STATUS "Linking soci_oracle")
        target_link_libraries(Configurator_ PUBLIC soci_oracle)
      endif()
      if(${POSTGRESQL_FOUND})
        message(STATUS "Linking soci_postgresql")
        target_link_libraries(Configurator_ PUBLIC soci_postgresql)
      endif()
      if(${SQLITE3_FOUND})
        message(STATUS "Linking soci_sqlite3")
        target_link_libraries(Configurator_ PUBLIC soci_sqlite3)
      endif()
    endif()
    
  endif()
    
    
    
   
    
    
    add_library(lib1 STATIC src/flash.cpp src/WDconfig.cpp src/X742CorrectionRoutines.cpp src/spi.cpp src/Digitizer.cpp)
    add_dependencies(lib1 Modules)
    target_link_libraries(lib1 PUBLIC Modules)
    target_include_directories(lib1 PUBLIC "${CMAKE_CURRENT_SOURCE_DIR}/include/")
    target_include_directories(lib1 PRIVATE $<BUILD_INTERFACE:${CMAKE_BINARY_DIR}/CAEN>)
    
    add_library(lib2 STATIC src/FileManager.cpp )
    add_dependencies(lib2 Modules)
    target_link_libraries(lib2 PUBLIC Modules)
    target_include_directories(lib2 PUBLIC "${CMAKE_CURRENT_SOURCE_DIR}/include/")
    target_include_directories(lib2 PRIVATE $<BUILD_INTERFACE:${CMAKE_BINARY_DIR}/CAEN>)
    
    add_library(web STATIC src/WebServer.cpp src/Plotter.cpp)
    add_dependencies(web WebSocket Modules)
    target_link_libraries(web PUBLIC Modules PUBLIC WebSocket)
    target_include_directories(web PUBLIC "${CMAKE_CURRENT_SOURCE_DIR}/include/")
    target_include_directories(web PRIVATE $<BUILD_INTERFACE:${CMAKE_BINARY_DIR}/CAEN>)

endif()
